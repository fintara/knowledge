plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.21'
}

group 'com.tsovedenski'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url "https://dl.bintray.com/spekframework/spek/" }
}

dependencies {
    def versions = [
            kotlin : '1.3.21',
            spek  : '2.0.2',
            junit : '5.2.0'
    ]
    
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$versions.kotlin"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$versions.junit"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$versions.junit"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$versions.junit"

    testImplementation("org.spekframework.spek2:spek-dsl-jvm:$versions.spek") {
        exclude group: "org.jetbrains.kotlin"
    }
    testRuntimeOnly("org.spekframework.spek2:spek-runner-junit5:$versions.spek") {
        exclude group: "org.junit.platform"
        exclude group: "org.jetbrains.kotlin"
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

test {
    useJUnitPlatform {
        includeEngines 'spek2'
    }
}

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent
tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}